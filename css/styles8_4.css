* {
  /* отступы отсчитываются внутрь. Размер блока будет 100-100 */
  box-sizing: border-box;
}

.flex-container {
  display: flex;
  /* выравнивание элементов в контейнере по основной горизонтально оси */
  justify-content: center;
}

.item {
  /* базовая ширина элемента */
  /* по-умолч */
  /* flex-basis: auto; */
  flex-basis: 100px;
  /* width: 100px; */

  height: 100px;
  background-color: burlywood;
  padding: 10px;
  border: 6px solid darkred;
  /* размер блока будет 130-130 (100+10*2 padding + 5*2 border) */
  margin: 10px;
}

/* flex-grow 0   flex-shrink 1*/

.item:nth-child(2) {
  /* по-умолч */
  /* flex-grow: 0; */
  /* flex-grow =1 – элемент увеличится и займет все свободное место, которое осталось  в контейнере */
  /* flex-grow: 1; */

  /* flex-shrink */
  /* по-умолч 1 - сужается при нехватке меств в родительском flex-контейнере */
  /* flex-shrink: 1; */
  /* Элемент Не сужается при нехватке места по ширине в родительском flex-контейнере */
  /* flex-shrink: 0; */
  flex-shrink: 2;
}

.item:nth-child(3) {
  /* flex-grow: 1; */
  /* 2-q   =1, 3-Й этот =2 . Он д.б . в 2 раза больше 2-го */
  /* flex-grow: 2; */
  flex-shrink: 3;
}

/* Для сделать ращзными элеементы чтобы посмотеть   align-items: - выравнивание вдоль поперчной оси */
/* .item:nth-child(2) {
  width: 50px;
  height: 50px;
} */

/* Внимание - чтобы отработало - надо last-child без скобочек */
/* .item:last-child {
  width: 80px;
  height: 80px;
} */
